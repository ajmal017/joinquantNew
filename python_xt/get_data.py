import pandas as pd
import time
import datetime
from param import *
from data_function import *
import os
import pickle as pk
import codecs
import requests
import json


def planedorders(s_date, e_date, unique_id):
    url = 'https://aicloud.citics.com/papertrading/api/obtain_orders'
    data = {
        # 可选，不填时读取所有策略
        'unique_id': unique_id,  # 'pt461a4de0cedf11e995950a580a81060a' ,
        # 必填，<API文档>中的API_KEY
        'api_key': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjcyNTgwODk2MDAsInVwZGF0ZV90aW1lIjoiMjAyMC0wOC0yOSAxNDowMDo1NCIsInVzZXJuYW1lIjoiYnFhZG0xIn0.mHwdmeHTW7vchJjKt1b_iiKwbJ8L-Soq6wy0g607ri4',
        # 'api_key': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImJxYWRtMSIsImV4cCI6NzI1ODA4OTYwMCwidXNlcl9pZCI6MSwidXBkYXRlX3RpbWUiOiIyMDE5LTA1LTA3IDA5OjQ4OjM0In0.t5D9UBFEKOfWygWbkDPqp1oj10lJde8XllXY2tA48Xo',
        'start_date': s_date[:10],
        'end_date': e_date[:10],
        'username': 'bqadm1',
    }
    r = requests.post(url=url, data=data)
    res_dict = json.loads(r.text)
    print(res_dict)
    if res_dict['code'] != 200:
        print('获取信号失败，code： %s' %res_dict['code'])
        return
    else:
        if len(res_dict['data']['order_list']) == 0:
            print('当日无信号')
            return
        else:
            df = pd.DataFrame.from_dict(res_dict['data']['order_list'])[['run_date', 'symbol', 'trade_side']]
            df_buy = df[df['trade_side'] == 1]
            if len(df_buy) == 0:
                print('当日无信号')
                return []
            else:
                # print('当日买入信号：%s' % df_buy.symbol.tolist())
                return df_buy.symbol.tolist()



def read_y_values(start_date, end_date, file=None, positon='xuntou'):
    """
    读取y值并且按日分组排序
        :param start_date: 回测开始日期
        :param end_date: 回测结束日期
        :param file: 暂时没有使用
        :param positon: 接入平台
        :return: dataframe格式
    """
    # 0. 接入平台为讯投
    if positon == 'xuntou':
        # 1. 根据y值文件路径进行数据读取
        score_df = pd.read_hdf(ypred_file_path)

        # 2. 截取掉股票代码的最后一个字符（y值文件中股票代码的后缀是SZA或SHA）
        score_df['instrument'] = score_df['instrument'].str[:-1]
        score_df.reset_index(drop=True, inplace=True)

        # 3. 按照日期进行分组，然后按照score分数排序，获得排名
        score_df['position'] = score_df.groupby(by=['date'])['score'].rank(ascending=False).astype(int)
        score_df = score_df.sort_values(by=['date', 'position'])

        # 4. 将日期进行转换后，取回测时间区间内的y值数据
        score_df['date'] = pd.to_datetime(score_df['date'], format="%Y-%m-%d")
        score_df = score_df.loc[(score_df['date'] >= start_date) & (score_df['date'] <= end_date)]
        score_df.reset_index(drop=True, inplace=True)

        # 5. 打印一下结果，返回y值矩阵
        return score_df
    if positon == 'zx':
        # 1. 根据y值文件路径进行数据读取
        score_df = pd.read_csv(ypred_file_path, encoding='gbk').loc[:, ['symbol', 'trade_side', 'run_date']]\
            .rename(columns={'symbol': 'instrument', 'run_date': 'date'})
        # print(score_df)
        score_df = score_df.sort_values(by=['date'])
        score_df['date'] = pd.to_datetime(score_df['date'], format="%Y-%m-%d")
        # 3. 按照日期进行分组，然后按照score分数排序，获得排名
        # 4. 将日期进行转换后，取回测时间区间内的y值数据

        # score_df['position'] = score_df.groupby(by=['date'])['score'].rank(ascending=False).astype(int)
        score_df = score_df.loc[(score_df['date'] >= start_date) & (score_df['date'] <= end_date)]
        score_df.reset_index(drop=True, inplace=True)
        # print(score_df)
        # 5. 打印一下结果，返回y值矩阵
        return score_df




def read_benchmark(start_date=None, end_date=None, instruments=None, positon='xuntou', context=None):
    '''读取benchmark数据'''

    '''读取benchmark基准数据'''
    assets = context.get_sector('000300.SH')
    fields = ['open','high','low','close','volume','amount']

    start_time = datetime.datetime.strptime(start_date, "%Y-%m-%d")
    start_time = start_time.strftime('%Y%m%d')
    end_time = datetime.datetime.strptime(end_date, "%Y-%m-%d")
    end_time = end_time.strftime('%Y%m%d')
    period = '1d'
    dividend_type = 'none'

    # 使用迅投 3.2.3(17) 函数进行设置
    df = context.get_market_data(fields, assets, start_time, end_time,
                                 skip_paused=True, period=period, dividend_type=dividend_type, count=-1)
    # df = panel_wf2_df(df)
    df['date']=df.index
    df['date'] = pd.to_datetime(df['date'], format='%Y-%m-%d')
    df.sort_values(by=['date'],inplace=True)
    df.reset_index(drop=True,inplace=True)
    return df






def read_minute_history(start_date='2018-01-01', end_date='2020-06-25', instruments=None, traget_fields=None,flag='bar1m',market='AShare',positon='xuntou', context=None):

        # 迅投分钟级别数据读取

        fields = ['open','high','low','close','volume','amount']
        assets = instruments
        period = '1m'
        # 构建datetime对象
        start_date = datetime.datetime.strptime((start_date + ' 09:30:00'), '%Y-%m-%d %H:%M:%S')
        end_date = datetime.datetime.strptime((end_date + ' 15:00:00'), '%Y-%m-%d %H:%M:%S')

        # 计算出str
        start_time = start_date.strftime('%Y%m%d%H%M%S')
        end_time = end_date.strftime('%Y%m%d%H%M%S')

        dividend_type = 'none'

        # 使用迅投 3.2.3(17) 函数进行设置
        df = context.get_market_data(fields, assets, start_time, end_time,
                                         skip_paused=True, period=period , dividend_type=dividend_type, count=-1)

        df = trans(df)

        if df.shape:
            df['turover'] = df['turover'].fillna(method='pad')
            df['close'] = df['close'].fillna(method='pad')
            df['high'] = df['high'].fillna(method='pad')
            df['low'] = df['low'].fillna(method='pad')
            df['volume'] = df['volume'].fillna(0)
        return df



def read_removed_st_mkt(positon='file'):
    '''读取风控需要被删除的股票的数据'''
    # positon = 'test'
    # 剔除掉的数据
    if positon == 'file':
        remove_data = []
        # now=time.strftime('%Y_%m_%d', time.localtime(time.time()))
        today = datetime.datetime.today()
        with open("c:\\e\\data\\qe\\backtest\\stock_blacklist", 'r', encoding = 'utf_8') as f:
            data = f.readlines()
            for line in data:
                if line and line.startswith('remove'):
                    info = line.strip().split('=')
                    removes = eval(info[1])
                    for key, values in removes.items():
                        begin_day = datetime.datetime.strptime(values[0], '%Y-%m-%d')
                        end_day = values[1]
                        if begin_day <= today and end_day:
                            end_date = datetime.datetime.strptime(values[1], '%Y-%m-%d')
                            if today <= end_date:
                                remove_data.append(key)
                        if begin_day <= today and (not end_day):
                            remove_data.append(key)
                if line and line.startswith('clean_all'):
                    info = line.strip().split('=')
                    clean_all = info[1]
        return remove_data, clean_all

    else:
        pass




def trans(qmt_df):
    '''
    将迅投数据与中信数据格式进行转换（3D->3D）
    :param qmt_df:
    :return:
    '''
    qmt_df = qmt_df.transpose((2, 1, 0))
    tmp = qmt_df.major_axis
    tmp_l = [datetime.strptime(i, '%Y%m%d') for i in tmp]
    qmt_df.major_axis = tmp_l
    return qmt_df


def panel_wf2_df(the_panel):
    '''
    3D -> 2D panel -> dataframe
    :param the_panel:
    :return:
    '''
    the_panel=the_panel.transpose((2,1,0))
    b = the_panel.to_frame()
    d = b.reset_index()
    d.rename(columns={'major': 'date', 'minor': 'instrument'}, inplace=True)
    return d


def get_trade_date_list(context=None):
    '''获取交易日历'''
    # 交易日历向前多取一年，防止数据不够
    start_list_date = str(int(param.start_date[0:4])-1) + param.start_date[5:7] + param.start_date[8:10]
    end_list_date = param.end_date[0:4] + param.end_date[5:7] + param.end_date[8:10]
    # 取沪深300指数的交易日历
    date_list = context.get_trading_dates('000300.SH', start_list_date, end_list_date, 1, '1d')

    if not date_list:
        date_list = ['20170102', '20170103', '20170104', '20170105', '20170108', '20170109', '20170110', '20170111', '20170112', '20170115', '20170116', '20170117', '20170118', '20170119', '20170122', '20170123', '20170124', '20170125', '20170202', '20170205', '20170206', '20170207', '20170208', '20170209', '20170212', '20170213', '20170214', '20170215', '20170216', '20170219', '20170220', '20170221', '20170222', '20170223', '20170226', '20170227', '20170228', '20170301', '20170302', '20170305', '20170306', '20170307', '20170308', '20170309', '20170312', '20170313', '20170314', '20170315', '20170316', '20170319', '20170320', '20170321', '20170322', '20170323', '20170326', '20170327', '20170328', '20170329', '20170330', '20170404', '20170405', '20170406', '20170409', '20170410', '20170411', '20170412', '20170413', '20170416', '20170417', '20170418', '20170419', '20170420', '20170423', '20170424', '20170425', '20170426', '20170427', '20170501', '20170502', '20170503', '20170504', '20170507', '20170508', '20170509', '20170510', '20170511', '20170514', '20170515', '20170516', '20170517', '20170518', '20170521', '20170522', '20170523', '20170524', '20170525', '20170530', '20170531', '20170601', '20170604', '20170605', '20170606', '20170607', '20170608', '20170611', '20170612', '20170613', '20170614', '20170615', '20170618', '20170619', '20170620', '20170621', '20170622', '20170625', '20170626', '20170627', '20170628', '20170629', '20170702', '20170703', '20170704', '20170705', '20170706', '20170709', '20170710', '20170711', '20170712', '20170713', '20170716', '20170717', '20170718', '20170719', '20170720', '20170723', '20170724', '20170725', '20170726', '20170727', '20170730', '20170731', '20170801', '20170802', '20170803', '20170806', '20170807', '20170808', '20170809', '20170810', '20170813', '20170814', '20170815', '20170816', '20170817', '20170820', '20170821', '20170822', '20170823', '20170824', '20170827', '20170828', '20170829', '20170830', '20170831', '20170903', '20170904', '20170905', '20170906', '20170907', '20170910', '20170911', '20170912', '20170913', '20170914', '20170917', '20170918', '20170919', '20170920', '20170921', '20170924', '20170925', '20170926', '20170927', '20170928', '20171008', '20171009', '20171010', '20171011', '20171012', '20171015', '20171016', '20171017', '20171018', '20171019', '20171022', '20171023', '20171024', '20171025', '20171026', '20171029', '20171030', '20171031', '20171101', '20171102', '20171105', '20171106', '20171107', '20171108', '20171109', '20171112', '20171113', '20171114', '20171115', '20171116', '20171119', '20171120', '20171121', '20171122', '20171123', '20171126', '20171127', '20171128', '20171129', '20171130', '20171203', '20171204', '20171205', '20171206', '20171207', '20171210', '20171211', '20171212', '20171213', '20171214', '20171217', '20171218', '20171219', '20171220', '20171221', '20171224', '20171225', '20171226', '20171227', '20171228', '20180101', '20180102', '20180103', '20180104', '20180107', '20180108', '20180109', '20180110', '20180111', '20180114', '20180115', '20180116', '20180117', '20180118', '20180121', '20180122', '20180123', '20180124', '20180125', '20180128', '20180129', '20180130', '20180131', '20180201', '20180204', '20180205', '20180206', '20180207', '20180208', '20180211', '20180212', '20180213', '20180221', '20180222', '20180225', '20180226', '20180227', '20180228', '20180301', '20180304', '20180305', '20180306', '20180307', '20180308', '20180311', '20180312', '20180313', '20180314', '20180315', '20180318', '20180319', '20180320', '20180321', '20180322', '20180325', '20180326', '20180327', '20180328', '20180329', '20180401', '20180402', '20180403', '20180408', '20180409', '20180410', '20180411', '20180412', '20180415', '20180416', '20180417', '20180418', '20180419', '20180422', '20180423', '20180424', '20180425', '20180426', '20180501', '20180502', '20180503', '20180506', '20180507', '20180508', '20180509', '20180510', '20180513', '20180514', '20180515', '20180516', '20180517', '20180520', '20180521', '20180522', '20180523', '20180524', '20180527', '20180528', '20180529', '20180530', '20180531', '20180603', '20180604', '20180605', '20180606', '20180607', '20180610', '20180611', '20180612', '20180613', '20180614', '20180618', '20180619', '20180620', '20180621', '20180624', '20180625', '20180626', '20180627', '20180628', '20180701', '20180702', '20180703', '20180704', '20180705', '20180708', '20180709', '20180710', '20180711', '20180712', '20180715', '20180716', '20180717', '20180718', '20180719', '20180722', '20180723', '20180724', '20180725', '20180726', '20180729', '20180730', '20180731', '20180801', '20180802', '20180805', '20180806', '20180807', '20180808', '20180809', '20180812', '20180813', '20180814', '20180815', '20180816', '20180819', '20180820', '20180821', '20180822', '20180823', '20180826', '20180827', '20180828', '20180829', '20180830', '20180902', '20180903', '20180904', '20180905', '20180906', '20180909', '20180910', '20180911', '20180912', '20180913', '20180916', '20180917', '20180918', '20180919', '20180920', '20180924', '20180925', '20180926', '20180927', '20181007', '20181008', '20181009', '20181010', '20181011', '20181014', '20181015', '20181016', '20181017', '20181018', '20181021', '20181022', '20181023', '20181024', '20181025', '20181028', '20181029', '20181030', '20181031', '20181101', '20181104', '20181105', '20181106', '20181107', '20181108', '20181111', '20181112', '20181113', '20181114', '20181115', '20181118', '20181119', '20181120', '20181121', '20181122', '20181125', '20181126', '20181127', '20181128', '20181129', '20181202', '20181203', '20181204', '20181205', '20181206', '20181209', '20181210', '20181211', '20181212', '20181213', '20181216', '20181217', '20181218', '20181219', '20181220', '20181223', '20181224', '20181225', '20181226', '20181227', '20190101', '20190102', '20190103', '20190106', '20190107', '20190108', '20190109', '20190110', '20190113', '20190114', '20190115', '20190116', '20190117', '20190120', '20190121', '20190122', '20190123', '20190124', '20190127', '20190128', '20190129', '20190130', '20190131', '20190210', '20190211', '20190212', '20190213', '20190214', '20190217', '20190218', '20190219', '20190220', '20190221', '20190224', '20190225', '20190226', '20190227', '20190228', '20190303', '20190304', '20190305', '20190306', '20190307', '20190310', '20190311', '20190312', '20190313', '20190314', '20190317', '20190318', '20190319', '20190320', '20190321', '20190324', '20190325', '20190326', '20190327', '20190328', '20190331', '20190401', '20190402', '20190403', '20190407', '20190408', '20190409', '20190410', '20190411', '20190414', '20190415', '20190416', '20190417', '20190418', '20190421', '20190422', '20190423', '20190424', '20190425', '20190428', '20190429', '20190505', '20190506', '20190507', '20190508', '20190509', '20190512', '20190513', '20190514', '20190515', '20190516', '20190519', '20190520', '20190521', '20190522', '20190523', '20190526', '20190527', '20190528', '20190529', '20190530', '20190602', '20190603', '20190604', '20190605', '20190609', '20190610', '20190611', '20190612', '20190613', '20190616', '20190617', '20190618', '20190619', '20190620', '20190623', '20190624', '20190625', '20190626', '20190627', '20190630', '20190701', '20190702', '20190703', '20190704', '20190707', '20190708', '20190709', '20190710', '20190711', '20190714', '20190715', '20190716', '20190717', '20190718', '20190721', '20190722', '20190723', '20190724', '20190725', '20190728', '20190729', '20190730', '20190731', '20190801', '20190804', '20190805', '20190806', '20190807', '20190808', '20190811', '20190812', '20190813', '20190814', '20190815', '20190818', '20190819', '20190820', '20190821', '20190822', '20190825', '20190826', '20190827', '20190828', '20190829', '20190901', '20190902', '20190903', '20190904', '20190905', '20190908', '20190909', '20190910', '20190911', '20190915', '20190916', '20190917', '20190918', '20190919', '20190922', '20190923', '20190924', '20190925', '20190926', '20190929', '20191007', '20191008', '20191009', '20191010', '20191013', '20191014', '20191015', '20191016', '20191017', '20191020', '20191021', '20191022', '20191023', '20191024', '20191027', '20191028', '20191029', '20191030', '20191031', '20191103', '20191104', '20191105', '20191106', '20191107', '20191110', '20191111', '20191112', '20191113', '20191114', '20191117', '20191118', '20191119', '20191120', '20191121', '20191124', '20191125', '20191126', '20191127', '20191128', '20191201', '20191202', '20191203', '20191204', '20191205', '20191208', '20191209', '20191210', '20191211', '20191212', '20191215', '20191216', '20191217', '20191218', '20191219', '20191222', '20191223', '20191224', '20191225', '20191226', '20191229', '20191230', '20200101', '20200102', '20200105', '20200106', '20200107', '20200108', '20200109', '20200112', '20200113', '20200114', '20200115', '20200116', '20200119', '20200120', '20200121', '20200122', '20200202', '20200203', '20200204', '20200205', '20200206', '20200209', '20200210', '20200211', '20200212', '20200213', '20200216', '20200217', '20200218', '20200219', '20200220', '20200223', '20200224', '20200225', '20200226', '20200227', '20200301', '20200302', '20200303', '20200304', '20200305', '20200308', '20200309', '20200310', '20200311', '20200312', '20200315', '20200316', '20200317', '20200318', '20200319', '20200322', '20200323', '20200324', '20200325', '20200326', '20200329', '20200330', '20200331', '20200401', '20200402', '20200406', '20200407', '20200408', '20200409', '20200412', '20200413', '20200414', '20200415', '20200416', '20200419', '20200420', '20200421', '20200422', '20200423', '20200426', '20200427', '20200428', '20200429', '20200505', '20200506', '20200507', '20200510', '20200511', '20200512', '20200513', '20200514', '20200517', '20200518', '20200519', '20200520', '20200521', '20200524', '20200525', '20200526', '20200527', '20200528', '20200531', '20200601', '20200602', '20200603', '20200604', '20200607', '20200608', '20200609', '20200610', '20200611', '20200614', '20200615', '20200616', '20200617', '20200618', '20200621', '20200622', '20200623', '20200628', '20200629', '20200630', '20200701', '20200702', '20200705', '20200706', '20200707', '20200708', '20200709', '20200712', '20200713', '20200714', '20200715', '20200716', '20200719', '20200720', '20200721', '20200722', '20200723', '20200726', '20200727', '20200728', '20200729', '20200730']


    return date_list


def get_last_trade_date(today, context=None):
    '''获取上一个交易日'''
    trade_date_list = get_trade_date_list(context=context)

    dd = today[0:4] + today[5:7] + today[8:10]

    index = 0
    try:
        index = trade_date_list.index(dd)
        return trade_date_list[index - 1]
    except:
        for i in trade_date_list:
            if i > dd:
                index = trade_date_list.index(i)
                break
        return trade_date_list[index - 1]